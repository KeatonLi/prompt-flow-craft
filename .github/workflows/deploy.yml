name: Deploy to Server

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Build backend
      run: |
        mvn clean package -DskipTests
    
    - name: Build frontend
      run: |
        cd frontend
        npm install
        npm run build
    
    - name: Prepare server environment
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        timeout: 300s
        command_timeout: 180s
        script: |
          echo "=== Starting server preparation ==="
          echo "Current time: $(date)"
          
          # 创建应用目录
          mkdir -p /opt/prompt-flow-craft
          cd /opt/prompt-flow-craft
          
          # 显示当前进程状态（仅显示我们的进程）
          echo "=== Current process status ==="
          ps aux | grep -E "(prompt-flow-craft|serve.*frontend-dist)" | grep -v grep || echo "No matching prompt-flow-craft processes found"
          
          # 停止现有服务
          echo "=== Stopping existing services ==="
          
          # 停止后端进程（使用精确匹配和温和方式）
          if [ -f "backend.pid" ]; then
            BACKEND_PID=$(cat backend.pid)
            echo "Found backend PID: $BACKEND_PID"
            if kill -0 $BACKEND_PID 2>/dev/null; then
              echo "Attempting to stop backend process $BACKEND_PID..."
              kill $BACKEND_PID 2>/dev/null || echo "Backend process already stopped"
              sleep 2
            else
              echo "Backend process not running"
            fi
            rm -f backend.pid
          fi
          
          # 停止前端进程
          if [ -f "frontend.pid" ]; then
            FRONTEND_PID=$(cat frontend.pid)
            echo "Found frontend PID: $FRONTEND_PID"
            if kill -0 $FRONTEND_PID 2>/dev/null; then
              echo "Attempting to stop frontend process $FRONTEND_PID..."
              kill $FRONTEND_PID 2>/dev/null || echo "Frontend process already stopped"
              sleep 1
            else
              echo "Frontend process not running"
            fi
            rm -f frontend.pid
          fi
          
          # 清理任何残留的prompt-flow-craft进程（使用精确匹配）
          echo "=== Cleaning up any remaining prompt-flow-craft processes ==="
          REMAINING_PROCESSES=$(ps aux | grep -E "prompt-flow-craft.*\.jar" | grep -v grep | awk '{print $2}')
          if [ -n "$REMAINING_PROCESSES" ]; then
            echo "Found remaining processes: $REMAINING_PROCESSES"
            for pid in $REMAINING_PROCESSES; do
              if kill -0 $pid 2>/dev/null; then
                echo "Stopping process $pid..."
                kill $pid 2>/dev/null || true
              fi
            done
            sleep 2
          else
            echo "No remaining prompt-flow-craft processes to clean"
          fi
          
          # 清理前端serve进程
          REMAINING_FRONTEND=$(ps aux | grep -E "serve.*frontend-dist" | grep -v grep | awk '{print $2}')
          if [ -n "$REMAINING_FRONTEND" ]; then
            echo "Found remaining frontend processes: $REMAINING_FRONTEND"
            for pid in $REMAINING_FRONTEND; do
              if kill -0 $pid 2>/dev/null; then
                echo "Stopping frontend process $pid..."
                kill $pid 2>/dev/null || true
              fi
            done
          else
            echo "No remaining frontend processes to clean"
          fi
          
          # 确保所有进程都已停止
          sleep 1
          
          # 备份旧日志
          echo "=== Backing up old logs ==="
          if [ -f "backend.log" ]; then
            mv backend.log "backend.log.$(date +%Y%m%d_%H%M%S)" 2>/dev/null || true
            echo "Backed up backend.log"
          fi
          if [ -f "frontend.log" ]; then
            mv frontend.log "frontend.log.$(date +%Y%m%d_%H%M%S)" 2>/dev/null || true
            echo "Backed up frontend.log"
          fi
          
          echo "=== Server environment prepared successfully ==="
          echo "Current time: $(date)"
          

    - name: Copy files to server
      uses: appleboy/scp-action@v0.1.4
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        timeout: 300s
        source: "target/prompt-flow-craft-1.0.0.jar,frontend/dist"
        target: "/opt/prompt-flow-craft/"
        strip_components: 0
    
    - name: Start services
      uses: appleboy/ssh-action@v0.1.7
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        port: ${{ secrets.SERVER_PORT || 22 }}
        timeout: 300s
        command_timeout: 180s
        script: |
          set -e
          cd /opt/prompt-flow-craft
          
          # 检查文件是否存在
          echo "Checking uploaded files..."
          ls -la
          
          # 重命名 jar 文件
          if [ -f "prompt-flow-craft-1.0.0.jar" ]; then
            mv prompt-flow-craft-1.0.0.jar backend.jar
            echo "Renamed jar file to backend.jar"
          elif [ -d "target" ] && [ -f "target/prompt-flow-craft-1.0.0.jar" ]; then
            mv target/prompt-flow-craft-1.0.0.jar backend.jar
            echo "Moved and renamed jar file to backend.jar"
          else
            echo "Available files:"
            ls -la
            echo "Available in target/:"
            ls -la target/ 2>/dev/null || echo "No target directory"
            echo "Error: prompt-flow-craft-1.0.0.jar not found!"
            exit 1
          fi
          
          # 处理前端文件
          if [ -d "dist" ]; then
            mv dist frontend-dist
            echo "Moved dist to frontend-dist"
          elif [ -d "frontend/dist" ]; then
            mv frontend/dist frontend-dist
            echo "Moved frontend/dist to frontend-dist"
          else
            echo "Available directories:"
            ls -la
            echo "Error: dist directory not found!"
            ls -la
            exit 1
          fi
          
          if [ ! -d "frontend-dist" ]; then
            echo "Error: frontend-dist directory not found!"
            ls -la
            exit 1
          fi
          
          # 安装 serve (如果没有安装)
          which serve || npm install -g serve
          
          # 启动后端服务 (后台运行)
          echo "Starting backend service..."
          nohup java -jar backend.jar > backend.log 2>&1 &
          BACKEND_PID=$!
          echo $BACKEND_PID > backend.pid
          echo "Backend started with PID: $BACKEND_PID"
          
          # 启动前端服务 (后台运行)
          echo "Starting frontend service..."
          cd frontend-dist
          nohup serve -s . -l 3000 > ../frontend.log 2>&1 &
          FRONTEND_PID=$!
          echo $FRONTEND_PID > ../frontend.pid
          echo "Frontend started with PID: $FRONTEND_PID"
          cd ..
          
          # 等待服务启动
          echo "Waiting for services to start..."
          sleep 10
          
          # 增强健康检查
          echo "Checking service status..."
          
          # 检查后端服务
          echo "Backend health check:"
          for i in {1..10}; do
            if curl -f http://localhost:8080/api/health; then
              echo "✅ Backend is healthy"
              break
            else
              echo "⏳ Waiting for backend... ($i/10)"
              sleep 5
            fi
          done
          
          # 检查前端服务
          echo "Frontend health check:"
          for i in {1..10}; do
            if curl -f http://localhost:3000; then
              echo "✅ Frontend is healthy"
              break
            else
              echo "⏳ Waiting for frontend... ($i/10)"
              sleep 3
            fi
          done
          
          # 显示最终进程状态
          echo "Final process status:"
          ps aux | grep -E "(java|serve)" | grep -v grep || echo "No matching processes found"
          
          # 显示监听端口
          echo "Listening ports:"
          netstat -tlnp | grep -E ":8080|:3000" || ss -tlnp | grep -E ":8080|:3000" || echo "Ports check unavailable"
          
          echo "🎉 Deployment completed successfully!"